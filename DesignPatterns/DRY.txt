DRY（Don't Repeat Yourself）原則是軟體開發中的一個重要原則，它強調避免程式碼中的重複和冗餘。
DRY 原則的核心思想是任何程式碼都應該只有一處來定義，這樣可以最大程度地減少代碼的重複性，
同時提高程式碼的可維護性和可讀性。

DRY 原則的主要好處包括：

    1. 代碼重用： 遵循 DRY 原則可以促進代碼的重用，因為相同的功能或邏輯只需要定義一次，
                 而不是在多個地方重複實現。
    2. 易於維護： 當程式碼需要修改時，只需要在一個地方進行修改，這樣可以降低出錯的風險
                 並提高代碼的可維護性。
    3. 提高可讀性： 減少重複的程式碼可以使代碼更加簡潔和清晰，提高了代碼的可讀性，
                 讓其他開發人員更容易理解代碼的意圖。
    4. 減少錯誤： 重複的程式碼意味著有多個地方需要進行修改，這增加了引入錯誤的可能性。
                 遵循 DRY 原則可以減少這種風險，因為只需要在一個地方進行修改。

遵循 DRY 原則的方法包括：

    提取重複邏輯： 發現程式碼中的重複邏輯，並將其提取到可重用的函數、方法或類別中。
    抽象化通用功能： 將通用功能抽象為函數、類別或庫，這樣可以在多個地方重用。
    設計清晰的介面： 如果多個地方需要相同的功能，可以設計一個清晰的介面來實現這個功能，這樣可以使代碼更加模組化並減少重複。
